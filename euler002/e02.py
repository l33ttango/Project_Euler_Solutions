"""
Euler 2

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

Solution: 4613734
Runtime: 0.5486011505126953 milliseconds
"""
import time
start = time.time()maximum
def sum_even_fib(maximum):
    """
    returns sum of even fibonacci numbers at or below 
    """
    total = 2
    a = 1
    b = 2
    while b <= maximum:
        total += b
        a, b = a + b + b, a + a + b + b + b
    return total

print (sum_even_fib(4000000))

end = time.time()
final_result = (end - start) * 1000

print ("Runtime equals ", final_result, "milliseconds")